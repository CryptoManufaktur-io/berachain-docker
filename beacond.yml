x-logging: &logging
  logging:
    driver: json-file
    options:
      max-size: 100m
      max-file: "3"
      tag: '{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}'

services:
  consensus:
    restart: unless-stopped
    build:
      context: ./beacond
      dockerfile: ${BEACOND_DOCKERFILE}
      args:
        - BEACOND_DOCKER_TAG=${BEACOND_DOCKER_TAG}
        - BEACOND_DOCKER_REPO=${BEACOND_DOCKER_REPO}
    # stop_grace_period: 5m
    # stop_signal: SIGINT
    image: berachain-beacond:${BEACOND_DOCKER_TAG}
    pull_policy: never
    user: beacond
    environment:
      - BEACOND_DOCKER_TAG=${BEACOND_DOCKER_TAG}
      - CHAIN_SPEC=${CHAIN_SPEC}
      - MONIKER_NAME=${MONIKER_NAME}
      - WALLET_ADDRESS_FEE_RECIPIENT=${WALLET_ADDRESS_FEE_RECIPIENT}
      - EL_ARCHIVE_NODE=${EL_ARCHIVE_NODE}
      - MY_IP=${MY_IP}
      - CL_RPC_PORT=${CL_RPC_PORT}
      - CL_P2P_PORT=${CL_P2P_PORT}
      - CL_PROXY_PORT=${CL_PROXY_PORT}
      - EL_AUTH_PORT=${EL_AUTH_PORT}
      - CL_EXTRA_FLAGS=${CL_EXTRA_FLAGS}
      - PROMETHEUS_PORT=${CL_PROMETHEUS_PORT}
    ports:
      - ${CL_P2P_PORT}:${CL_P2P_PORT}/tcp
      - ${CL_P2P_PORT}:${CL_P2P_PORT}/udp
    <<: *logging
    volumes:
      - consensus-data:/beacond
      - common-data:/common
    entrypoint:
      - docker-entrypoint.sh
      - bera-beacond
      - start
      - --home
      - /beacond
    labels:
        - traefik.enable=true
        - traefik.http.routers.${CL_RPC_HOST}.service=${CL_RPC_HOST}
        - traefik.http.routers.${CL_RPC_HOST}.entrypoints=websecure
        - traefik.http.routers.${CL_RPC_HOST}.rule=Host(`${CL_RPC_HOST}.${DOMAIN}`)
        - traefik.http.routers.${CL_RPC_HOST}.tls.certresolver=letsencrypt
        - traefik.http.routers.${CL_RPC_HOST}lb.service=${CL_RPC_HOST}
        - traefik.http.routers.${CL_RPC_HOST}lb.entrypoints=websecure
        - traefik.http.routers.${CL_RPC_HOST}lb.rule=Host(`${CL_RPC_LB}.${DOMAIN}`)
        - traefik.http.routers.${CL_RPC_HOST}lb.tls.certresolver=letsencrypt
        - traefik.http.services.${CL_RPC_HOST}.loadbalancer.server.port=${CL_RPC_PORT}
        - metrics.scrape=true
        - metrics.path=/metrics
        - metrics.port=${CL_PROMETHEUS_PORT}
        - metrics.instance=consensus
        - metrics.network=${CHAIN_SPEC}

volumes:
  consensus-data:
  common-data:
